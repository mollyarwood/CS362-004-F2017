

-------------Testing Council Room--------------

All Tests Passed 

File 'randomtestcard2.c'
Lines executed:67.27% of 55
Creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:15.98% of 557
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   115173:    8:int compare(const void* a, const void* b) {
   115173:    9:  if (*(int*)a > *(int*)b)
      650:   10:    return 1;
   114523:   11:  if (*(int*)a < *(int*)b)
      452:   12:    return -1;
   114071:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	   {
    #####:  110:	       if (kingdomCards[j] == i)
        -:  111:	       {
        -:  112:	         //check if card is a 'Victory' Kingdom card
    #####:  113:	         if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		       {
    #####:  115:		          if (numPlayers == 2){ 
    #####:  116:		            state->supplyCount[i] = 8; 
        -:  117:		          }
    #####:  118:		          else{ state->supplyCount[i] = 12; }
        -:  119:		        }
        -:  120:	         else
        -:  121:		       {
    #####:  122:		          state->supplyCount[i] = 10;
        -:  123:		       }
    #####:  124:	         break;
        -:  125:	       }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
      108:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      108:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      108:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      108:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    28819:  214:  while (state->deckCount[player] > 0) {
    28603:  215:    card = floor(Random() * state->deckCount[player]);
    28603:  216:    newDeck[newDeckPos] = state->deck[player][card];
    28603:  217:    newDeckPos++;
  2468058:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  2439455:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    28603:  221:    state->deckCount[player]--;
        -:  222:  }
    28711:  223:  for (i = 0; i < newDeckPos; i++) {
    28603:  224:    state->deck[player][i] = newDeck[i];
    28603:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      108:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
    #####:  251:  printf("card: %d\n", card);
        -:  252:
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
        -:  273:}
        -:  274:
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
    16000:  349:int whoseTurn(struct gameState *state) {
    16000:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
        -:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
        -:  408:	{
    #####:  409:	  j++;
        -:  410:	}
        -:  411:    }
    #####:  412:  if ( j >= 3)
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
        -:  418:}
        -:  419:
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
        -:  471:	{
    #####:  472:	  players[i] = -9999;
        -:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
        -:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
        -:  485:	{
    #####:  486:	  j = i;
        -:  487:	}
        -:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
        -:  496:	{
    #####:  497:	  players[i]++;
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
        -:  506:	{
    #####:  507:	  j = i;
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
        -:  516:	{
    #####:  517:	  players[i] = 1;
        -:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
        -:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
    58000:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:  int deckCounter;
        -:  531:
    58000:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    28711:  537:    for (i = 0; i < state->discardCount[player];i++){
    28603:  538:      state->deck[player][i] = state->discard[player][i];
    28603:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
      108:  542:    state->deckCount[player] = state->discardCount[player];
      108:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
      108:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
      108:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
      108:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
      108:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
      108:  563:    if (deckCounter == 0)
    #####:  564:      return -1;
        -:  565:
      108:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      108:  567:    state->deckCount[player]--;
      108:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
        -:  572:
    57892:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    57892:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57892:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57892:  581:    state->deckCount[player]--;
    57892:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    58000:  585:  return 0;
        -:  586:}
        -:  587:
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        -:  651:
        -:  652:/************************************************
        -:  653: * new adventurerEffect function implemented
        -:  654: * by Molly Arwood. Took code from switch case
        -:  655: * and moved it into a standalone function.
        -:  656:************************************************/
        -:  657:
      500:  658:int adventurerEffect(int currentPlayer, struct gameState *state, int drawntreasure, int cardDrawn, int *temphand) {
        -:  659:
      500:  660:	int z = 0;
        -:  661:
     2000:  662:	while(drawntreasure<2){
     1000:  663:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  664:	  		shuffle(currentPlayer, state);
        -:  665:		}
     1000:  666:		drawCard(currentPlayer, state);
     1000:  667:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1000:  668:		if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
     1000:  669:	  		drawntreasure++;
        -:  670:		else{
        -:  671:	  		temphand[z]=cardDrawn;
        -:  672:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  673:	  		z++;
        -:  674:		}
        -:  675:      }
        -:  676:
     1000:  677:	while(z-1>=0){
    #####:  678:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  679:		z=z-1;
        -:  680:      }
        -:  681:
      500:  682:	return 0;
        -:  683:}
        -:  684:
        -:  685:
        -:  686:
        -:  687:/************************************************
        -:  688: * new smithyEffect function implemented
        -:  689: * by Molly Arwood. Took code from switch case
        -:  690: * and moved it into a standalone function.
        -:  691:************************************************/
    #####:  692:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:
        -:  694:      //+3 Cards
        -:  695:      int i;
    #####:  696:      for (i = 0; i <= 3; i++) {
    #####:  697:	       drawCard(currentPlayer, state);
        -:  698:	    }
        -:  699:
        -:  700:      //discard card from hand
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:      return 0;
        -:  704:}
        -:  705:
        -:  706:
        -:  707:/************************************************
        -:  708: * new villageEffect function implemented
        -:  709: * by Molly Arwood. Took code from switch case
        -:  710: * and moved it into a standalone function.
        -:  711:************************************************/
    #####:  712:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  713:
        -:  714:      //+1 Card
    #####:  715:      drawCard(currentPlayer, state);
        -:  716:			
        -:  717:      //+2 Actions
    #####:  718:      state->numActions = 2;
        -:  719:			
        -:  720:      //discard played card from hand
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:
    #####:  723:      return 0;
        -:  724:}
        -:  725:
        -:  726:
        -:  727:
        -:  728:/************************************************
        -:  729: * new mineEffect function implemented
        -:  730: * by Molly Arwood. Took code from switch case
        -:  731: * and moved it into a standalone function.
        -:  732:************************************************/
    #####:  733:int mineEffect (int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  734:
        -:  735:      int i;
        -:  736:      int j;
    #####:  737:      j = state->hand[currentPlayer][choice2];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map && choice2 < curse)
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
    #####:  765:	      break;
        -:  766:	    }
        -:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:}
        -:  771:
        -:  772:
        -:  773:
        -:  774:/************************************************
        -:  775: * new councilRoomEffect function implemented
        -:  776: * by Molly Arwood. Took code from switch case
        -:  777: * and moved it into a standalone function.
        -:  778:************************************************/
    11000:  779:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  780:
        -:  781:      int i;
        -:  782:
        -:  783:      //+4 Cards
    55000:  784:      for (i = 0; i < 4; i++)
        -:  785:	{
    44000:  786:	  drawCard(currentPlayer, state);
        -:  787:	}
        -:  788:
        -:  789:      //+1 Buy
    11000:  790:      state->numBuys++;
        -:  791:
        -:  792:
        -:  793:      //Each other player draws a card
    33000:  794:      for (i = 0; i < state->numPlayers; i++) {
    22000:  795:	       if ( i != currentPlayer )
        -:  796:         {
    11000:  797:	         drawCard(i, state);
        -:  798:	       }
        -:  799:	    }
        -:  800:			
        -:  801:      //put played card in played card pile
    11000:  802:      discardCard(handPos, currentPlayer, state, 0);
    11000:  803:      return 0;	
        -:  804:}
        -:  805:
        -:  806:
        -:  807:
        -:  808:
     2500:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int x;
        -:  815:  int index;
     2500:  816:  int currentPlayer = whoseTurn(state);
     2500:  817:  int nextPlayer = currentPlayer + 1;
        -:  818:
     2500:  819:  int tributeRevealedCards[2] = {-1, -1};
        -:  820:  int temphand[MAX_HAND];// moved above the if statement
     2500:  821:  int drawntreasure=0;
        -:  822:  int cardDrawn;
     2500:  823:  int z = 0;// this is the counter for the temp hand
     2500:  824:  if (nextPlayer > (state->numPlayers - 1)){
     1997:  825:    nextPlayer = 0;
        -:  826:  }
        -:  827:  
        -:  828:	
        -:  829:  //uses switch to select card and perform actions
     2500:  830:  switch( card ) 
        -:  831:    {
        -:  832:    case adventurer:
      500:  833:	return adventurerEffect(currentPlayer, state, drawntreasure, cardDrawn, temphand);
        -:  834:			
        -:  835:    case council_room:
    #####:  836:       return councilRoomEffect(currentPlayer, state, handPos);
        -:  837:
        -:  838:    case feast:
        -:  839:      //gain card with cost up to 5
        -:  840:      //Backup hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  843:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  844:      }
        -:  845:      //Backup hand
        -:  846:
        -:  847:      //Update Coins for Buy
    #####:  848:      updateCoins(currentPlayer, state, 5);
    #####:  849:      x = 1;//Condition to loop on
    #####:  850:      while( x == 1) {//Buy one card
    #####:  851:	if (supplyCount(choice1, state) <= 0){
        -:  852:	  if (DEBUG)
        -:  853:	    printf("None of that card left, sorry!\n");
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  857:	  }
        -:  858:	}
    #####:  859:	else if (state->coins < getCost(choice1)){
    #####:  860:	  printf("That card is too expensive!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  864:	  }
        -:  865:	}
        -:  866:	else{
        -:  867:
        -:  868:	  if (DEBUG){
        -:  869:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  870:	  }
        -:  871:
    #####:  872:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  873:	  x = 0;//No more buying cards
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
        -:  879:	}
        -:  880:      }     
        -:  881:
        -:  882:      //Reset Hand
    #####:  883:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  884:	state->hand[currentPlayer][i] = temphand[i];
    #####:  885:	temphand[i] = -1;
        -:  886:      }
        -:  887:      //Reset Hand
        -:  888:      			
    #####:  889:      return 0;
        -:  890:			
        -:  891:    case gardens:
    #####:  892:      return -1;
        -:  893:			
        -:  894:    case mine: 
    #####:  895:      return mineEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  896: 
        -:  897:   case remodel:
    #####:  898:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  899:
    #####:  900:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  901:	{
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
    #####:  905:      gainCard(choice2, state, 0, currentPlayer);
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
        -:  909:
        -:  910:      //discard trashed card
    #####:  911:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  912:	{
    #####:  913:	  if (state->hand[currentPlayer][i] == j)
        -:  914:	    {
    #####:  915:	      discardCard(i, currentPlayer, state, 0);			
    #####:  916:	      break;
        -:  917:	    }
        -:  918:	}
        -:  919:
        -:  920:
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case smithy:
    #####:  924:      return smithyEffect(currentPlayer, state, handPos);
        -:  925:		
        -:  926:    case village:
    #####:  927:      return villageEffect(currentPlayer, state, handPos);
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
        -:  948:	      printf("No estate cards in your hand, invalid choice\n");
        -:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
     2000:  982:      drawCard(currentPlayer, state);
        -:  983:
        -:  984:      //+1 Actions
     2000:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
     2000:  988:      discardCard(handPos, currentPlayer, state, 0);
     2000:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
    #####: 1043:      if (choice1 == 1)
        -: 1044:	{
        -: 1045:	  //+2 cards
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
    #####: 1049:      else if (choice1 == 2)
        -: 1050:	{
        -: 1051:	  //+2 coins
    #####: 1052:	  state->coins = state->coins + 2;
        -: 1053:	}
        -: 1054:      else
        -: 1055:	{
        -: 1056:	  //trash 2 cards in hand
    #####: 1057:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1058:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1059:	}
        -: 1060:			
        -: 1061:      //discard card from hand
    #####: 1062:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case tribute:
    #####: 1066:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1067:	if (state->deckCount[nextPlayer] > 0){
    #####: 1068:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	  state->deckCount[nextPlayer]--;
        -: 1070:	}
    #####: 1071:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1072:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1073:	  state->discardCount[nextPlayer]--;
        -: 1074:	}
        -: 1075:	else{
        -: 1076:	  //No Card to Reveal
        -: 1077:	  if (DEBUG){
        -: 1078:	    printf("No cards to reveal\n");
        -: 1079:	  }
        -: 1080:	}
        -: 1081:      }
        -: 1082:	    
        -: 1083:      else{
    #####: 1084:	if (state->deckCount[nextPlayer] == 0){
    #####: 1085:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1086:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1087:	    state->deckCount[nextPlayer]++;
    #####: 1088:	    state->discard[nextPlayer][i] = -1;
    #####: 1089:	    state->discardCount[nextPlayer]--;
        -: 1090:	  }
        -: 1091:			    
    #####: 1092:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1093:	} 
    #####: 1094:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1095:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1096:	state->deckCount[nextPlayer]--;
    #####: 1097:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1098:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1099:	state->deckCount[nextPlayer]--;
        -: 1100:      }    
        -: 1101:		       
    #####: 1102:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1103:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1104:	state->playedCardCount++;
    #####: 1105:	tributeRevealedCards[1] = -1;
        -: 1106:      }
        -: 1107:
    #####: 1108:      for (i = 0; i <= 2; i ++){
    #####: 1109:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1110:	  state->coins += 2;
        -: 1111:	}
        -: 1112:		    
    #####: 1113:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1114:	  drawCard(currentPlayer, state);
    #####: 1115:	  drawCard(currentPlayer, state);
        -: 1116:	}
        -: 1117:	else{//Action Card
    #####: 1118:	  state->numActions = state->numActions + 2;
        -: 1119:	}
        -: 1120:      }
        -: 1121:	    
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case ambassador:
    #####: 1125:      j = 0;		//used to check if player has enough cards to discard
        -: 1126:
    #####: 1127:      if (choice2 > 2 || choice2 < 0)
        -: 1128:	{
    #####: 1129:	  return -1;				
        -: 1130:	}
        -: 1131:
    #####: 1132:      if (choice1 == handPos)
        -: 1133:	{
    #####: 1134:	  return -1;
        -: 1135:	}
        -: 1136:
    #####: 1137:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	{
    #####: 1139:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1140:	    {
    #####: 1141:	      j++;
        -: 1142:	    }
        -: 1143:	}
    #####: 1144:      if (j < choice2)
        -: 1145:	{
    #####: 1146:	  return -1;				
        -: 1147:	}
        -: 1148:
        -: 1149:      if (DEBUG) 
        -: 1150:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1151:
        -: 1152:      //increase supply count for choosen card by amount being discarded
    #####: 1153:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1154:			
        -: 1155:      //each other player gains a copy of revealed card
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1161:	    }
        -: 1162:	}
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
        -: 1167:      //trash copies of cards returned to supply
    #####: 1168:      for (j = 0; j < choice2; j++)
        -: 1169:	{
    #####: 1170:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1171:	    {
    #####: 1172:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1173:		{
    #####: 1174:		  discardCard(i, currentPlayer, state, 1);
    #####: 1175:		  break;
        -: 1176:		}
        -: 1177:	    }
        -: 1178:	}			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case cutpurse:
        -: 1183:
    #####: 1184:      updateCoins(currentPlayer, state, 2);
    #####: 1185:      for (i = 0; i < state->numPlayers; i++)
        -: 1186:	{
    #####: 1187:	  if (i != currentPlayer)
        -: 1188:	    {
    #####: 1189:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1190:		{
    #####: 1191:		  if (state->hand[i][j] == copper)
        -: 1192:		    {
    #####: 1193:		      discardCard(j, i, state, 0);
    #####: 1194:		      break;
        -: 1195:		    }
    #####: 1196:		  if (j == state->handCount[i])
        -: 1197:		    {
    #####: 1198:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1199:			{
        -: 1200:			  if (DEBUG)
        -: 1201:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1202:			}	
    #####: 1203:		      break;
        -: 1204:		    }		
        -: 1205:		}
        -: 1206:					
        -: 1207:	    }
        -: 1208:				
        -: 1209:	}				
        -: 1210:
        -: 1211:      //discard played card from hand
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1213:
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:		
        -: 1217:    case embargo: 
        -: 1218:      //+2 Coins
    #####: 1219:      state->coins = state->coins + 2;
        -: 1220:			
        -: 1221:      //see if selected pile is in play
    #####: 1222:      if ( state->supplyCount[choice1] == -1 )
        -: 1223:	{
    #####: 1224:	  return -1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //add embargo token to selected supply pile
    #####: 1228:      state->embargoTokens[choice1]++;
        -: 1229:			
        -: 1230:      //trash card
    #####: 1231:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case outpost:
        -: 1235:      //set outpost flag
    #####: 1236:      state->outpostPlayed++;
        -: 1237:			
        -: 1238:      //discard card
    #####: 1239:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1240:      return 0;
        -: 1241:		
        -: 1242:    case salvager:
        -: 1243:      //+1 buy
    #####: 1244:      state->numBuys++;
        -: 1245:			
    #####: 1246:      if (choice1)
        -: 1247:	{
        -: 1248:	  //gain coins equal to trashed card
    #####: 1249:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1250:	  //trash card
    #####: 1251:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1252:	}
        -: 1253:			
        -: 1254:      //discard card
    #####: 1255:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1256:      return 0;
        -: 1257:		
        -: 1258:    case sea_hag:
    #####: 1259:      for (i = 0; i < state->numPlayers; i++){
    #####: 1260:	if (i != currentPlayer){
    #####: 1261:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1262:	  state->discardCount[i]++;
    #####: 1263:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1264:	}
        -: 1265:      }
    #####: 1266:      return 0;
        -: 1267:		
        -: 1268:    case treasure_map:
        -: 1269:      //search hand for another treasure_map
    #####: 1270:      index = -1;
    #####: 1271:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1272:	{
    #####: 1273:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1274:	    {
    #####: 1275:	      index = i;
    #####: 1276:	      break;
        -: 1277:	    }
        -: 1278:	}
    #####: 1279:      if (index > -1)
        -: 1280:	{
        -: 1281:	  //trash both treasure cards
    #####: 1282:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1283:	  discardCard(index, currentPlayer, state, 1);
        -: 1284:
        -: 1285:	  //gain 4 Gold cards
    #####: 1286:	  for (i = 0; i < 4; i++)
        -: 1287:	    {
    #####: 1288:	      gainCard(gold, state, 1, currentPlayer);
        -: 1289:	    }
        -: 1290:				
        -: 1291:	  //return success
    #####: 1292:	  return 1;
        -: 1293:	}
        -: 1294:			
        -: 1295:      //no second treasure_map found in hand
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
    #####: 1299:  return -1;
        -: 1300:}
        -: 1301:
    13000: 1302:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1303:{
        -: 1304:	
        -: 1305:  //if card is not trashed, added to Played pile 
    13000: 1306:  if (trashFlag < 1)
        -: 1307:    {
        -: 1308:      //add card to played pile
    13000: 1309:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    13000: 1310:      state->playedCardCount++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //set played card to -1
    13000: 1314:  state->hand[currentPlayer][handPos] = -1;
        -: 1315:
        -: 1316:
        -: 1317:  //remove card from player's hand
    13000: 1318:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1319:    {
        -: 1320:      //reduce number of cards in hand
       10: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
    12990: 1323:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1324:    {
        -: 1325:      //reduce number of cards in hand
    #####: 1326:      state->handCount[currentPlayer]--;
        -: 1327:    }
        -: 1328:  else 	
        -: 1329:    {
        -: 1330:      //replace discarded card with last card in hand
    12990: 1331:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1332:      //set last card to -1
    12990: 1333:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1334:      //reduce number of cards in hand
    12990: 1335:      state->handCount[currentPlayer]--;
        -: 1336:    }
        -: 1337:	
    13000: 1338:  return 0;
        -: 1339:}
        -: 1340:
    #####: 1341:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1342:{
        -: 1343:  //Note: supplyPos is enum of choosen card
        -: 1344:	
        -: 1345:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1346:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1347:    {
    #####: 1348:      return -1;
        -: 1349:    }
        -: 1350:	
        -: 1351:  //added card for [whoseTurn] current player:
        -: 1352:  // toFlag = 0 : add to discard
        -: 1353:  // toFlag = 1 : add to deck
        -: 1354:  // toFlag = 2 : add to hand
        -: 1355:
    #####: 1356:  if (toFlag == 1)
        -: 1357:    {
    #####: 1358:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1359:      state->deckCount[player]++;
        -: 1360:    }
    #####: 1361:  else if (toFlag == 2)
        -: 1362:    {
    #####: 1363:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1364:      state->handCount[player]++;
        -: 1365:    }
        -: 1366:  else
        -: 1367:    {
    #####: 1368:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1369:      state->discardCount[player]++;
        -: 1370:    }
        -: 1371:	
        -: 1372:  //decrease number in supply pile
    #####: 1373:  state->supplyCount[supplyPos]--;
        -: 1374:	 
    #####: 1375:  return 0;
        -: 1376:}
        -: 1377:
    #####: 1378:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1379:{
        -: 1380:  int i;
        -: 1381:	
        -: 1382:  //reset coin count
    #####: 1383:  state->coins = 0;
        -: 1384:
        -: 1385:  //add coins for each Treasure card in player's hand
    #####: 1386:  for (i = 0; i < state->handCount[player]; i++)
        -: 1387:    {
    #####: 1388:      if (state->hand[player][i] == copper)
        -: 1389:	{
    #####: 1390:	  state->coins += 1;
        -: 1391:	}
    #####: 1392:      else if (state->hand[player][i] == silver)
        -: 1393:	{
    #####: 1394:	  state->coins += 2;
        -: 1395:	}
    #####: 1396:      else if (state->hand[player][i] == gold)
        -: 1397:	{
    #####: 1398:	  state->coins += 3;
        -: 1399:	}	
        -: 1400:    }	
        -: 1401:
        -: 1402:  //add bonus
    #####: 1403:  state->coins += bonus;
        -: 1404:
    #####: 1405:  return 0;
        -: 1406:}
        -: 1407:
        -: 1408:
        -: 1409://end of dominion.c
        -: 1410:
