        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-11-17
        -:    4: * Class: CS_362_SE2
        -:    5: * cardtest1.c - Smithy Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18://constants and prototypes
        -:   19:#define TESTCARD = "smithy"
        -:   20:int structComparer(struct gameState *, struct gameState *, int);
        -:   21:
        -:   22:
        -:   23:
        -:   24:
function main called 1 returned 100% blocks executed 85%
        1:   25:int main() {
        -:   26:
        -:   27:	/*********************************************
        -:   28:	//Initial Setup
        -:   29:	*********************************************/
        -:   30:	struct gameState G;
        -:   31:	struct gameState Gconst;
        1:   32:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   33:	int r = rand() % 100000000;
call    0 returned 100%
        1:   34:	int numPlayers = 2;
        1:   35:	int coin_bonus = 0;	
        1:   36:	int i = 0;
        1:   37:	int k[10] = {adventurer, gardens, council_room, village, minion, mine, 
        -:   38:		   		cutpurse, sea_hag, tribute, smithy};
        -:   39:
        -:   40:	//initialize game
        1:   41:	initializeGame(numPlayers, k, r, &G);
call    0 returned 100%
        1:   42:	memcpy(&Gconst, &G, sizeof(struct gameState));
        1:   43:	printf("\n\n-------------Testing Smithy--------------\n\n");
call    0 returned 100%
        -:   44:
        -:   45:
        -:   46:
        -:   47:	/*********************************************
        -:   48:	//variables before smithy played
        -:   49:	*********************************************/
        1:   50:	int currPlayer = whoseTurn(&G);
call    0 returned 100%
        1:   51:	int cardsInHand = G.handCount[currPlayer];
        1:   52:	int deckCount = G.deckCount[currPlayer];
        1:   53:	int victorySupply[3] = {G.supplyCount[1], G.supplyCount[2], G.supplyCount[3]};
        -:   54:	int kingdomSupply[20];
       21:   55:	for (i = 0; i < 20; i++) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
       20:   56:		kingdomSupply[i] = G.supplyCount[i+7];
        -:   57:	}
        -:   58:
        -:   59:
        -:   60:	//play Smithy card
        1:   61:	cardEffect(smithy, -1, -1, -1, &G, 0, &coin_bonus);
call    0 returned 100%
        -:   62:
        -:   63:
        -:   64:
        -:   65:	/********************************************
        -:   66:	//variables after smithy played
        -:   67:	********************************************/
        -:   68:
        -:   69:	//hand count increase
        1:   70:	if (G.handCount[currPlayer] == cardsInHand + 3) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   71:		printf("PASSED: current hand count increase\n\n");
call    0 returned 100%
        -:   72:	} 
        -:   73:	else {
    #####:   74:		printf("FAILED: current hand count increase\n\n");
call    0 never executed
        -:   75:	}
        -:   76:
        -:   77:
        -:   78:	//deck count decrease
        1:   79:	if (G.deckCount[currPlayer] == deckCount - 3) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   80:		printf("PASSED: deck count decrease\n\n");
call    0 never executed
        -:   81:	}
        -:   82:	else {
        1:   83:		printf("FAILED: deck count decrease\n\n");
call    0 returned 100%
        -:   84:	}
        -:   85:
        -:   86:
        -:   87:	//checking victory card pile
        1:   88:	int flag = 1;
        4:   89:	for (i = 0; i < sizeof(victorySupply) / sizeof(int); i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   90:		if (victorySupply[i] != G.supplyCount[i+1]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   91:			flag = 0;
        -:   92:		}
        -:   93:	}
        1:   94:	if (flag) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   95:		printf("PASSED: victory cards unchanged\n\n");
call    0 returned 100%
        -:   96:	}
        -:   97:	else {
    #####:   98:		printf("FAILED: victory cards unchanged\n\n");
call    0 never executed
        -:   99:	}
        -:  100:
        -:  101:
        -:  102:	//checking kingdom card pile
        1:  103:	flag = 1;
       21:  104:	for (i = 0; i < sizeof(kingdomSupply) / sizeof(int); i++) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
       20:  105:		if (kingdomSupply[i] != G.supplyCount[i+7]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:			flag = 0;
        -:  107:		}
        -:  108:	}
        1:  109:	if (flag) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  110:		printf("PASSED: kingdom cards unchanged\n\n");
call    0 returned 100%
        -:  111:	}
        -:  112:	else {
    #####:  113:		printf("FAILED: kingdom cards unchanged\n\n");
call    0 never executed
        -:  114:	}
        -:  115:
        -:  116:
        -:  117:	//checking other player's state
        1:  118:	currPlayer = whoseTurn(&G) + 1;
call    0 returned 100%
        -:  119:
        1:  120:	int flag2 = structComparer(&Gconst, &G, currPlayer);
call    0 returned 100%
        1:  121:	if (flag2 == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  122:		printf("PASSED: other player's handCount unchanged\n\n");
call    0 returned 100%
        1:  123:		printf("PASSED: other player's deck unchanged\n\n");
call    0 returned 100%
        1:  124:		printf("PASSED: other player's discard count unchanged\n\n");
call    0 returned 100%
        -:  125:	}
        -:  126:
        -:  127:
        -:  128:
        1:  129:	printf("\n\n");
call    0 returned 100%
        -:  130:
        1:  131:	return 0;
        -:  132:}
        -:  133:
        -:  134:
        -:  135:
        -:  136:
function structComparer called 1 returned 100% blocks executed 63%
        1:  137:int structComparer(struct gameState *state1, struct gameState *state2, int player2) {
        1:  138:	int i = 0;
        1:  139:	int flag = 1;
        -:  140:
        -:  141:
        -:  142:	//handCount comparison
        1:  143:	if (state1->handCount[player2] != state2->handCount[player2]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  144:		flag = 0;
    #####:  145:		printf("FAILED ohter player's handCount altered\n");
call    0 never executed
        -:  146:	}
        -:  147:	
        -:  148:	//deck comparision
        1:  149:	if (state1->deckCount[player2] != state2->deckCount[player2]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  150:		flag = 0;
    #####:  151:		printf("FAILED: other player's deckCount altered\n");
call    0 never executed
        -:  152:	}
        -:  153:
        -:  154:	//discard count
        1:  155:	if (state1->discardCount[player2] != state2->discardCount[player2]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  156:		flag = 0;
    #####:  157:		printf("FAILED: other player's discardCount altered\n");
call    0 never executed
        -:  158:	}
        -:  159:
        1:  160:	return flag;
        -:  161:}
