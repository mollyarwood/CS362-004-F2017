        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-11-17
        -:    4: * Class: CS_362_SE2
        -:    5: * unittest1.c - gainCard Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18://constants and prototypes
        -:   19:void supplyCheck(int cardSupply[], int cardChosen[], struct gameState *G);
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        -:   24:
        -:   25:	/*********************************************
        -:   26:	//Initial Setup
        -:   27:	*********************************************/
        -:   28:	struct gameState G;
        1:   29:	srand(time(NULL));
        1:   30:	int r = rand() % 100000000;
        1:   31:	int numPlayers = 2;
        1:   32:	int coin_bonus = 0;	
        1:   33:	int i = 0;
        1:   34:	int j = 0;
        1:   35:	int k[10] = {adventurer, great_hall, council_room, village, minion, mine, 
        -:   36:		   		cutpurse, sea_hag, treasure_map, smithy};
        -:   37:
        -:   38:	//initialize game
        1:   39:	initializeGame(numPlayers, k, r, &G);
        1:   40:	printf("\n\n-------------Testing gainCard--------------\n\n");
        -:   41:
        -:   42:	/*********************************************
        -:   43:	//variables setup for tests
        -:   44:	*********************************************/
        1:   45:	int cardChosen[5] = {0, 1, 4, 7, 26};
        1:   46:	int toFlag[5] = {0, 1, 2, -1, 5};
        1:   47:	int currPlayer = whoseTurn(&G);
        -:   48:	int funcReturn[5];
        1:   49:	int errFlag = 0;
        1:   50:	int cardsInHand = G.handCount[currPlayer];
        1:   51:	int deckCount = G.deckCount[currPlayer];
        1:   52:	int discardCount = G.discardCount[currPlayer];
        4:   53:	int cardSupply[5] = {supplyCount(cardChosen[0], &G), supplyCount(cardChosen[1], &G),
        2:   54:						supplyCount(cardChosen[2], &G), supplyCount(cardChosen[3], &G),
        1:   55:						supplyCount(cardChosen[4], &G), supplyCount(cardChosen[5], &G)};
        -:   56:
        -:   57:
        -:   58:	/*********************************************
        -:   59:	//for each card type,  test the different flag options.
        -:   60:	*********************************************/
        -:   61:
        -:   62:	/******** first: toFlag = 0 (to discard) ****************/
        1:   63:	printf("--Testing toFlag == 0 \n\n");
        6:   64:	for (i = 0; i < 5; i++) {
        5:   65:		funcReturn[i] = gainCard(cardChosen[i], &G, toFlag[0], currPlayer);
        -:   66:	}	
        -:   67:
        -:   68:
        -:   69:	//check for -1 in funcReturn
        6:   70:	for (i = 0; i < sizeof(funcReturn) / sizeof(int); i++) {
        5:   71:		if (funcReturn[i] == -1) {
    #####:   72:			errFlag = 1;
        -:   73:		}
        -:   74:	}
        1:   75:	if (errFlag) {
    #####:   76:		printf("FAILED: function caught card error when no error exists\n\n");
        -:   77:	}
        -:   78:	else {
        1:   79:		printf("PASSED: No supplyCount errors caught \n\n");
        -:   80:	}
        -:   81:
        -:   82:
        -:   83:	//check discard pile after
        1:   84:	if (discardCount < G.discardCount[currPlayer]) {
        1:   85:		printf("PASSED: discard count increased to: %d\n\n", G.discardCount[currPlayer]);
        1:   86:		discardCount = G.discardCount[currPlayer]; //updating for next tests
        -:   87:	}
        -:   88:	else {
    #####:   89:		printf("FAILED: discard count did not increase\n\n");
        -:   90:	}
        -:   91:	//check hand pile after
        1:   92:	if (cardsInHand < G.handCount[currPlayer]) {
    #####:   93:		printf("FAILED: hand count increased to: %d\n\n", G.handCount[currPlayer]);
        -:   94:	}
        -:   95:	else {
        1:   96:		printf("PASSED: hand count did not increase\n\n");
        -:   97:	}
        -:   98:	//check deck pile after
        1:   99:	if (deckCount < G.deckCount[currPlayer]) {
    #####:  100:		printf("FAILED: deck count increased to: %d\n\n", G.deckCount[currPlayer]);
        -:  101:	}
        -:  102:	else {
        1:  103:		printf("PASSED: deck count did not increase\n\n");
        -:  104:	}
        -:  105:
        -:  106:	//check supply of cards
        1:  107:	supplyCheck(cardSupply, cardChosen, &G);
        -:  108:	
        -:  109:
        -:  110:	/******** second: toFlag = 1 (to deck) ****************/
        1:  111:	printf("--Testing toFlag == 1 \n\n");
        6:  112:	for (i = 0; i < 5; i++) {
        5:  113:		funcReturn[i] = gainCard(cardChosen[i], &G, toFlag[1], currPlayer);
        -:  114:	}	
        -:  115:
        -:  116:
        -:  117:	//check deck pile after
        1:  118:	if (deckCount < G.deckCount[currPlayer]) {
        1:  119:		printf("PASSED: deck count increased to: %d\n\n", G.deckCount[currPlayer]);
        1:  120:		deckCount = G.deckCount[currPlayer]; //updating for next tests
        -:  121:	}
        -:  122:	else {
    #####:  123:		printf("FAILED: deck count did not increase\n\n");
        -:  124:	}
        -:  125:	//check hand pile after
        1:  126:	if (cardsInHand < G.handCount[currPlayer]) {
    #####:  127:		printf("FAILED: hand count increased to: %d\n\n", G.handCount[currPlayer]);
        -:  128:	}
        -:  129:	else {
        1:  130:		printf("PASSED: hand count did not increase\n\n");
        -:  131:	}
        -:  132:	//check discard pile after
        1:  133:	if (discardCount < G.discardCount[currPlayer]) {
    #####:  134:		printf("FAILED: discard count increased to: %d\n\n", G.discardCount[currPlayer]);
        -:  135:	}
        -:  136:	else {
        1:  137:		printf("PASSED: discard count did not increase\n\n");
        -:  138:	}
        -:  139:
        -:  140:	//check supply of cards
        1:  141:	supplyCheck(cardSupply, cardChosen, &G);
        -:  142:
        -:  143:
        -:  144:	/******** third: toFlag = 2 (to hand) ****************/
        1:  145:	printf("--Testing toFlag == 2 \n\n");
        6:  146:	for (i = 0; i < 5; i++) {
        5:  147:		funcReturn[i] = gainCard(cardChosen[i], &G, toFlag[2], currPlayer);
        -:  148:	}	
        -:  149:
        -:  150:
        -:  151:	//check hand pile after
        1:  152:	if (cardsInHand < G.handCount[currPlayer]) {
        1:  153:		printf("PASSED: hand count increased to: %d\n\n", G.handCount[currPlayer]);
        1:  154:		cardsInHand = G.handCount[currPlayer]; //updating for next tests
        -:  155:	}
        -:  156:	else {
    #####:  157:		printf("FAILED: hand count did not increase\n\n");
        -:  158:	}
        -:  159:	//check discard pile after
        1:  160:	if (discardCount < G.discardCount[currPlayer]) {
    #####:  161:		printf("FAILED: discard count increased to: %d\n\n", G.discardCount[currPlayer]);
        -:  162:	}
        -:  163:	else {
        1:  164:		printf("PASSED: discard count did not increase\n\n");
        -:  165:	}
        -:  166:	//check deck pile after
        1:  167:	if (deckCount < G.deckCount[currPlayer]) {
    #####:  168:		printf("FAILED: deck count increased to: %d\n\n", G.deckCount[currPlayer]);
        -:  169:	}
        -:  170:	else {
        1:  171:		printf("PASSED: deck count did not increase\n\n");
        -:  172:	}
        -:  173:
        -:  174:	//check supply of cards
        1:  175:	supplyCheck(cardSupply, cardChosen, &G);
        -:  176:
        -:  177:
        -:  178:
        -:  179:
        -:  180:	/******** fourth: toFlag = -1 (to discard) ****************/
        1:  181:	printf("--Testing toFlag == -1 \n\n");
        6:  182:	for (i = 0; i < 5; i++) {
        5:  183:		funcReturn[i] = gainCard(cardChosen[i], &G, toFlag[3], currPlayer);
        -:  184:	}	
        -:  185:
        -:  186:
        -:  187:	//check discard pile after
        1:  188:	if (discardCount < G.discardCount[currPlayer]) {
        1:  189:		printf("PASSED: discard count increased to: %d\n\n", G.discardCount[currPlayer]);
        1:  190:		discardCount = G.discardCount[currPlayer]; //updating for next tests
        -:  191:	}
        -:  192:	else {
    #####:  193:		printf("FAILED: discard count did not increase\n\n");
        -:  194:	}
        -:  195:	//check hand pile after
        1:  196:	if (cardsInHand < G.handCount[currPlayer]) {
    #####:  197:		printf("FAILED: hand count increased to: %d\n\n", G.handCount[currPlayer]);
        -:  198:	}
        -:  199:	else {
        1:  200:		printf("PASSED: hand count did not increase\n\n");
        -:  201:	}
        -:  202:	//check deck pile after
        1:  203:	if (deckCount < G.deckCount[currPlayer]) {
    #####:  204:		printf("FAILED: deck count increased to: %d\n\n", G.deckCount[currPlayer]);
        -:  205:	}
        -:  206:	else {
        1:  207:		printf("PASSED: deck count did not increase\n\n");
        -:  208:	}
        -:  209:
        -:  210:	//check supply of cards
        1:  211:	supplyCheck(cardSupply, cardChosen, &G);
        -:  212:
        -:  213:
        -:  214:
        -:  215:
        -:  216:	/*********************************************
        -:  217:	//function should catch empty supply of card error
        -:  218:	*********************************************/
        1:  219:	printf("--Testing supplyCount Error Catching \n\n");
        1:  220:	G.supplyCount[1] = 0;
        1:  221:	funcReturn[0] = gainCard(cardChosen[1], &G, toFlag[1], currPlayer);
        1:  222:	funcReturn[1] = gainCard(15, &G, toFlag[1], currPlayer);
        -:  223:
        -:  224:	//empty card supply
        1:  225:	if (funcReturn[0] == -1) {
        1:  226:		printf("PASSED: function caught empty card supply error\n\n");
        -:  227:	}
        -:  228:	else {
    #####:  229:		printf("FAILED: function did not catch empty card supply error\n\n");
        -:  230:	}
        -:  231:
        -:  232:	//card not used in game
        1:  233:	if (funcReturn[1] == -1) {
        1:  234:		printf("PASSED: function caught unused card in game error\n\n");
        -:  235:	}
        -:  236:	else {
    #####:  237:		printf("FAILED: function did not catch unused card in game error\n\n");
        -:  238:	}
        -:  239:
        -:  240:
        1:  241:	printf("\n\n");
        1:  242:	return 0;
        -:  243:}
        -:  244:
        -:  245:
        -:  246:
        -:  247://checks supply of cards after gainCards function runs
        4:  248:void supplyCheck(int cardSupply[], int cardChosen[], struct gameState *G)
        -:  249:{
        -:  250:	int i;
        -:  251:
        -:  252:	//check supplyCount of card after
       24:  253:	for (i = 0; i < 5; i++) {
       20:  254:		if (cardSupply[i] > supplyCount(cardChosen[i], G)) {
       20:  255:			printf("PASSED: supply of %d card has lowered from %d to %d\n\n", cardChosen[i], cardSupply[i], supplyCount(cardChosen[i], G));
        -:  256:		}
        -:  257:		else {
    #####:  258:			printf("FAILED: supply of %d cards did not lower. \n\n", cardChosen[i]);
        -:  259:		}
        -:  260:	}
        4:  261:}
