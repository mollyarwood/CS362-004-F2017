        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-25-17
        -:    4: * Class: CS_362_SE2
        -:    5: * randomtestcard1.c - Adventurer Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:#include <math.h>
        -:   18:
        -:   19://constants and prototypes
        -:   20:#define TESTCARD = "Adventurer"
        -:   21:#define ADDBUGS 0
        -:   22:
        -:   23:void checkResults(struct gameState *, struct gameState *, int *);
        -:   24:void addbugs(int player, struct gameState *);
        -:   25:
        -:   26:
        -:   27:
        1:   28:int main() {
        -:   29:
        -:   30:	/*********************************************
        -:   31:	//Initial Setup
        -:   32:	*********************************************/
        -:   33:	struct gameState G;
        -:   34:	struct gameState Gconst;
        1:   35:	srand(time(NULL));
        1:   36:	int currPlayer = 0;
        1:   37:	int coin_bonus = 0;	
        1:   38:	int i = 0;
        1:   39:	int j = 0;
        1:   40:	int passed = 1;
        1:   41:	int k[10] = {adventurer, gardens, council_room, village, minion, mine, 
        -:   42:		   		cutpurse, sea_hag, tribute, smithy};
        -:   43:
        -:   44:
        -:   45:	/*********************************************
        -:   46:	//testing adventurer
        -:   47:	*********************************************/
        1:   48:	printf("\n\n-------------Testing Adventurer--------------\n\n");
        -:   49:
        -:   50:	//initialize game
      501:   51:	for (i = 0; i < 500; i++) {
 13150500:   52:		for (j=0; j < sizeof(struct gameState); j++) {
 13150000:   53:			((char*)&G)[i] = floor(rand() % 256);
        -:   54:		}
        -:   55:
        -:   56:		//General
      500:   57:		G.supplyCount[4] = floor(rand() % 60);
      500:   58:		G.supplyCount[5] = floor(rand() % 40);
      500:   59:		G.supplyCount[6] = floor(rand() % 30);
        -:   60:
        -:   61:		//player 1
      500:   62:		G.whoseTurn = currPlayer;
      500:   63:		G.handCount[currPlayer] = floor(rand() % 500);
      500:   64:		G.deckCount[currPlayer] = floor(rand() % 500);
      500:   65:		G.discardCount[currPlayer] = floor(rand() % 500);
        -:   66:
        -:   67:		//player 2
      500:   68:		G.handCount[currPlayer + 1] = floor(rand() % 500);
      500:   69:		G.deckCount[currPlayer + 1] = floor(rand() % 500);
      500:   70:		G.discardCount[currPlayer + 1] = floor(rand() % 500);
        -:   71:
        -:   72:		//play adventurer card
      500:   73:		memcpy(&Gconst, &G, sizeof(struct gameState));
      500:   74:		cardEffect(adventurer, -1, -1, -1, &G, 0, &coin_bonus);
        -:   75:
        -:   76:		if (ADDBUGS) {
        -:   77:
        -:   78:			//direct bugs
        -:   79:			addbugs(currPlayer, &G);
        -:   80:
        -:   81:			//side effect bugs
        -:   82:			addbugs(currPlayer + 1, &G);
        -:   83:		}
        -:   84:
      500:   85:		checkResults(&G, &Gconst, &passed);
        -:   86:	}
        -:   87:
        1:   88:	if (passed) {
    #####:   89:		printf("All Tests Passed \n\n");
        -:   90:	}
        -:   91:
        -:   92:
        1:   93:	return 0;
        -:   94:}
        -:   95:
        -:   96:
        -:   97:
      500:   98:void checkResults(struct gameState *G, struct gameState *Gconst, int *passed) {
        -:   99:
      500:  100:	int currPlayer = whoseTurn(G);
      500:  101:	int player2 = currPlayer + 1;
      500:  102:	int initialTreasure = Gconst->supplyCount[4] + Gconst->supplyCount[5] + Gconst->supplyCount[6];
      500:  103:	int victorySupply[3] = {Gconst->supplyCount[1], Gconst->supplyCount[2], Gconst->supplyCount[3]};
        -:  104:	int kingdomSupply[20];
        -:  105:	int i;
    10500:  106:	for (i = 0; i < 20; i++) {
    10000:  107:		kingdomSupply[i] = Gconst->supplyCount[i+7];
        -:  108:	}
        -:  109:
        -:  110:
        -:  111:
        -:  112:	/**********************************
        -:  113:	 *Direct Tests
        -:  114:	 *********************************/
        -:  115:
        -:  116:	//hand count increase
      500:  117:	if (G->handCount[currPlayer] != Gconst->handCount[currPlayer] + 2) {
    #####:  118:		printf("FAILED: current hand count increase\n\n");
    #####:  119:		*passed = 0;
        -:  120:	} 
        -:  121:
        -:  122:
        -:  123:	//current hand's money increase
      500:  124:	int newTreasure = G->supplyCount[4] + G->supplyCount[5] + G->supplyCount[6];
      500:  125:	if (initialTreasure <= newTreasure) {
      500:  126:		printf("G supplyCount: %d \t Gconst: %d \n", newTreasure, initialTreasure);
      500:  127:		printf("FAILED: current hand treasure differs from expected\n\n");
      500:  128:		*passed = 0;
        -:  129:	}
        -:  130:
        -:  131:
        -:  132:	//deck count decrease
      500:  133:	if ((G->deckCount[currPlayer] >= Gconst->deckCount[currPlayer]) && Gconst->deckCount[currPlayer] > 1) {
    #####:  134:		printf("FAILED: deck count decrease test\n\n");
    #####:  135:		*passed = 0;
        -:  136:	}
        -:  137:
        -:  138:
        -:  139:
        -:  140:	//checking victory card pile
     2000:  141:	for (i = 0; i < sizeof(victorySupply) / sizeof(int); i++) {
     1500:  142:		if (victorySupply[i] != G->supplyCount[i+1]) {
    #####:  143:			printf("FAILED: victory cards unchanged\n\n");
    #####:  144:			*passed = 0;
        -:  145:		}
        -:  146:	}
        -:  147:
        -:  148:
        -:  149:
        -:  150:	//checking kingdom card pile
    10500:  151:	for (i = 0; i < sizeof(kingdomSupply) / sizeof(int); i++) {
    10000:  152:		if (kingdomSupply[i] != G->supplyCount[i+7]) {
    #####:  153:			printf("FAILED: kingdom cards unchanged\n\n");
    #####:  154:			*passed = 0;
        -:  155:		}
        -:  156:	}
        -:  157:
        -:  158:
        -:  159:	/**********************************
        -:  160:	 *Side Effect Tests
        -:  161:	 *********************************/
        -:  162:
        -:  163:	//handCount comparison
      500:  164:	if (G->handCount[player2] != Gconst->handCount[player2]) {
    #####:  165:		printf("FAILED other player's handCount altered\n");
    #####:  166:		*passed = 0;
        -:  167:	}
        -:  168:	
        -:  169:	//deck comparision
      500:  170:	if (G->deckCount[player2] != Gconst->deckCount[player2]) {
    #####:  171:		printf("FAILED: other player's deckCount altered\n");
    #####:  172:		*passed = 0;
        -:  173:	}
        -:  174:
        -:  175:	//discard count
      500:  176:	if (G->discardCount[player2] != Gconst->discardCount[player2]) {
    #####:  177:		printf("FAILED: other player's discardCount altered\n");
    #####:  178:		*passed = 0;
        -:  179:	}
        -:  180:
      500:  181:}
        -:  182:
        -:  183:
        -:  184:
    #####:  185:void addbugs(int player, struct gameState *G) {
        -:  186:
        -:  187:	//victoryCard check
    #####:  188:	G->supplyCount[1] = rand() % 10;
        -:  189:
        -:  190:	//handCount check
    #####:  191:	G->handCount[player] = G->handCount[player] - 1;
        -:  192:
        -:  193:	//deckCount check
    #####:  194:	G->deckCount[player] = G->deckCount[player] -5;
        -:  195:
    #####:  196:}
        -:  197:
        -:  198:
