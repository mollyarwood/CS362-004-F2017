        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-11-17
        -:    4: * Class: CS_362_SE2
        -:    5: * unittest2.c - isGameOver Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18://constants and prototypes
        -:   19:void checkState(int stateReturned);
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 100%
        1:   22:int main() {
        -:   23:
        -:   24:	/*********************************************
        -:   25:	//Initial Setup
        -:   26:	*********************************************/
        -:   27:	struct gameState G;
        -:   28:	//struct gameState *Gpoint = &G;
        -:   29:	//struct gameState Gconst;
        1:   30:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   31:	int r = rand() % 100000000;
call    0 returned 100%
        1:   32:	int numPlayers = 2;
        1:   33:	int coin_bonus = 0;	
        1:   34:	int i = 0;
        1:   35:	int j = 0;
        1:   36:	int k[10] = {adventurer, great_hall, council_room, village, minion, mine, 
        -:   37:		   		cutpurse, sea_hag, treasure_map, smithy};
        -:   38:
        -:   39:	//initialize game
        1:   40:	initializeGame(numPlayers, k, r, &G);
call    0 returned 100%
        -:   41:	//memcpy(&Gconst, &G, sizeof(struct gameState));
        1:   42:	printf("\n\n-------------Testing isGameOver--------------\n\n");
call    0 returned 100%
        -:   43:
        -:   44:	/*********************************************
        -:   45:	//variables setup for tests
        -:   46:	*********************************************/
        1:   47:	int province = 3;
        -:   48:	int stateReturned;
        1:   49:	int origProvince = G.supplyCount[province];
        -:   50:	int origSupplies[10];
        -:   51:
       11:   52:	for (i = 0; i < sizeof(k) / sizeof(int); i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   53:		origSupplies[i] = G.supplyCount[k[i]];
        -:   54:	}
        -:   55:
        -:   56:	/*********************************************
        -:   57:	//Testing
        -:   58:	*********************************************/
        -:   59:
        -:   60:	//no cards at 0 - game should not end
        1:   61:	printf("-- No card supplies at 0: \n\n");
call    0 returned 100%
        1:   62:	stateReturned = isGameOver(&G);
call    0 returned 100%
        1:   63:	checkState(!stateReturned);
call    0 returned 100%
        -:   64:
        -:   65:
        -:   66:
        -:   67:	//set Province card supply equal to 0
        1:   68:	printf("-- Set province supply to 0: \n\n");
call    0 returned 100%
        1:   69:	G.supplyCount[province] = 0;
        1:   70:	stateReturned = isGameOver(&G);
call    0 returned 100%
        1:   71:	checkState(stateReturned);
call    0 returned 100%
        -:   72:
        -:   73:	//reset
        1:   74:	G.supplyCount[province] = origProvince;
        -:   75:
        -:   76:
        -:   77:
        -:   78:	//three supply piles are at 0
        1:   79:	printf("-- Set 3 card supplies to 0: \n\n");
call    0 returned 100%
        4:   80:	for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   81:		G.supplyCount[k[i]] = 0;
        -:   82:	}
        1:   83:	stateReturned = isGameOver(&G);
call    0 returned 100%
        1:   84:	checkState(stateReturned);
call    0 returned 100%
        -:   85:
        -:   86:	//reset
        4:   87:	for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   88:		G.supplyCount[k[i]] = origSupplies[i];
        -:   89:	}
        -:   90:
        -:   91:
        -:   92:
        -:   93:	// >3 supply piles are at 0
        1:   94:	printf("-- Set 5 card supplies to 0: \n\n");
call    0 returned 100%
        6:   95:	for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   96:		G.supplyCount[k[i]] = 0;
        -:   97:	}
        1:   98:	stateReturned = isGameOver(&G);
call    0 returned 100%
        1:   99:	checkState(stateReturned);
call    0 returned 100%
        -:  100:
        -:  101:	//reset
        6:  102:	for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  103:		G.supplyCount[k[i]] = origSupplies[i];
        -:  104:	}
        -:  105:
        -:  106:
        -:  107:
        -:  108:
        -:  109:	//set 2 supply piles to 0
        1:  110:	printf("-- Set 2 card supplies to 0: \n\n");
call    0 returned 100%
        3:  111:	for (i = 0; i < 2; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  112:		G.supplyCount[k[i]] = 0;
        -:  113:	}
        1:  114:	stateReturned = isGameOver(&G);
call    0 returned 100%
        1:  115:	checkState(!stateReturned);
call    0 returned 100%
        -:  116:
        -:  117:	//reset
        3:  118:	for (i = 0; i < 2; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  119:		G.supplyCount[k[i]] = origSupplies[i];
        -:  120:	}
        -:  121:
        -:  122:
        -:  123:
        1:  124:	printf("\n\n");
call    0 returned 100%
        1:  125:	return 0;
        -:  126:}
        -:  127:
        -:  128:
        -:  129:
        -:  130:
function checkState called 5 returned 100% blocks executed 75%
        5:  131:void checkState(int stateReturned) {
        5:  132:	if (stateReturned == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  133:		printf("PASSED: game results as expected\n\n");
call    0 returned 100%
        -:  134:	}
        -:  135:	else {
    #####:  136:		printf("FAILED: game results not as expected\n\n");
call    0 never executed
        -:  137:	}
        5:  138:}
