        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-25-17
        -:    4: * Class: CS_362_SE2
        -:    5: * randomtestcard1.c - Adventurer Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:#include <math.h>
        -:   18:
        -:   19://constants and prototypes
        -:   20:#define TESTCARD = "Adventurer"
        -:   21:#define ADDBUGS 0
        -:   22:
        -:   23:void checkResults(struct gameState *, struct gameState *, int *);
        -:   24:void addbugs(int player, struct gameState *);
        -:   25:
        -:   26:
        -:   27:
        1:   28:int main() {
        -:   29:
        -:   30:	/*********************************************
        -:   31:	//Initial Setup
        -:   32:	*********************************************/
        -:   33:	struct gameState G;
        -:   34:	struct gameState Gconst;
        1:   35:	srand(time(NULL));
        1:   36:	int r = rand() % 100000000;
        1:   37:	int numPlayers = 2;
        1:   38:	int currPlayer = 0;
        1:   39:	int coin_bonus = 0;	
        1:   40:	int i = 0;
        1:   41:	int j = 0;
        1:   42:	int passed = 1;
        1:   43:	int k[10] = {adventurer, gardens, council_room, village, minion, mine, 
        -:   44:		   		cutpurse, sea_hag, tribute, smithy};
        -:   45:
        -:   46:
        -:   47:	/*********************************************
        -:   48:	//testing adventurer
        -:   49:	*********************************************/
        1:   50:	printf("\n\n-------------Testing Adventurer--------------\n\n");
        -:   51:
        -:   52:	//initialize game
      501:   53:	for (i = 0; i < 500; i++) {
        -:   54:	//	for (j=0; j < sizeof(struct gameState); j++) {
        -:   55:	//		((char*)&G)[i] = floor(rand() % 256);
        -:   56:	//	}
      500:   57:		initializeGame(numPlayers, k, r, &G);
        -:   58:
        -:   59:		//player 1
      500:   60:		G.whoseTurn = currPlayer;
      500:   61:		G.handCount[currPlayer] = floor(rand() % 500);
      500:   62:		G.deckCount[currPlayer] = floor(rand() % 500);
      500:   63:		G.discardCount[currPlayer] = floor(rand() % 500);
      500:   64:		G.supplyCount[4] = 60;
      500:   65:		G.supplyCount[5] = 40;
      500:   66:		G.supplyCount[6] = 30;
        -:   67:
        -:   68:		//player 2
      500:   69:		G.handCount[currPlayer + 1] = floor(rand() % 500);
      500:   70:		G.deckCount[currPlayer + 1] = floor(rand() % 500);
      500:   71:		G.discardCount[currPlayer + 1] = floor(rand() % 500);
        -:   72:
        -:   73:		//play adventurer card
      500:   74:		memcpy(&Gconst, &G, sizeof(struct gameState));
      500:   75:		cardEffect(adventurer, -1, -1, -1, &G, 0, &coin_bonus);
        -:   76:
        -:   77:		if (ADDBUGS) {
        -:   78:
        -:   79:			//direct bugs
        -:   80:			addbugs(currPlayer, &G);
        -:   81:
        -:   82:			//side effect bugs
        -:   83:			addbugs(currPlayer + 1, &G);
        -:   84:		}
        -:   85:
      500:   86:		checkResults(&G, &Gconst, &passed);
        -:   87:	}
        -:   88:
        1:   89:	if (passed) {
    #####:   90:		printf("All Tests Passed \n\n");
        -:   91:	}
        -:   92:
        -:   93:
        1:   94:	return 0;
        -:   95:}
        -:   96:
        -:   97:
        -:   98:
      500:   99:void checkResults(struct gameState *G, struct gameState *Gconst, int *passed) {
        -:  100:
      500:  101:	int currPlayer = whoseTurn(G);
      500:  102:	int player2 = currPlayer + 1;
      500:  103:	int initialTreasure = 0; 
      500:  104:	int newTreasure = 0;
      500:  105:	int victorySupply[3] = {Gconst->supplyCount[1], Gconst->supplyCount[2], Gconst->supplyCount[3]};
        -:  106:	int kingdomSupply[20];
        -:  107:	int i;
        -:  108:
        -:  109:
    10500:  110:	for (i = 0; i < 20; i++) {
    10000:  111:		kingdomSupply[i] = Gconst->supplyCount[i+7];
        -:  112:	}
        -:  113:
        -:  114:	//calculating new treasure cards in deck
     3456:  115:	for (i = 0; i < G->deckCount[currPlayer]; i++) {
     2956:  116:		if (G->deck[currPlayer][i] == copper || G->deck[currPlayer][i] == silver || G->deck[currPlayer][i] == gold) {
     1972:  117:			newTreasure++;
        -:  118:		}
        -:  119:	}
        -:  120:
        -:  121:	//calculating initial treasure cards in deck
   130691:  122:	for (i = 0; i < Gconst->deckCount[currPlayer]; i++) {
   130191:  123:		if (Gconst->deck[currPlayer][i] == copper || Gconst->deck[currPlayer][i] == silver || Gconst->deck[currPlayer][i] == gold) {
     3469:  124:			initialTreasure++;
        -:  125:		}
        -:  126:	}
        -:  127:
        -:  128:
        -:  129:	/**********************************
        -:  130:	 *Direct Tests
        -:  131:	 *********************************/
        -:  132:
        -:  133:	//hand count increase
      500:  134:	if (G->handCount[currPlayer] != Gconst->handCount[currPlayer] + 2) {
      500:  135:		printf("FAILED: current hand count increase\n\n");
      500:  136:		*passed = 0;
        -:  137:	} 
        -:  138:
        -:  139:
        -:  140:	//current hand's money increase. if player's deck has not decreased in treasures, it fails (cuz treasure should now be in hands). 
      500:  141:	if (newTreasure != initialTreasure - 2) {
      500:  142:		printf("G supplyCount: %d \t Gconst: %d \n", newTreasure, initialTreasure);
      500:  143:		printf("FAILED: current hand treasure differs from expected\n\n");
      500:  144:		*passed = 0;
        -:  145:	}
        -:  146:
        -:  147:
        -:  148:	//deck count decrease
      500:  149:	if ((G->deckCount[currPlayer] >= Gconst->deckCount[currPlayer]) && Gconst->deckCount[currPlayer] > 1) {
    #####:  150:		printf("FAILED: deck count decrease test\n\n");
    #####:  151:		*passed = 0;
        -:  152:	}
        -:  153:
        -:  154:
        -:  155:
        -:  156:	//checking victory card pile
     2000:  157:	for (i = 0; i < sizeof(victorySupply) / sizeof(int); i++) {
     1500:  158:		if (victorySupply[i] != G->supplyCount[i+1]) {
    #####:  159:			printf("FAILED: victory cards unchanged\n\n");
    #####:  160:			*passed = 0;
        -:  161:		}
        -:  162:	}
        -:  163:
        -:  164:
        -:  165:
        -:  166:	//checking kingdom card pile
    10500:  167:	for (i = 0; i < sizeof(kingdomSupply) / sizeof(int); i++) {
    10000:  168:		if (kingdomSupply[i] != G->supplyCount[i+7]) {
    #####:  169:			printf("FAILED: kingdom cards unchanged\n\n");
    #####:  170:			*passed = 0;
        -:  171:		}
        -:  172:	}
        -:  173:
        -:  174:
        -:  175:	/**********************************
        -:  176:	 *Side Effect Tests
        -:  177:	 *********************************/
        -:  178:
        -:  179:	//handCount comparison
      500:  180:	if (G->handCount[player2] != Gconst->handCount[player2]) {
    #####:  181:		printf("FAILED other player's handCount altered\n");
    #####:  182:		*passed = 0;
        -:  183:	}
        -:  184:	
        -:  185:	//deck comparision
      500:  186:	if (G->deckCount[player2] != Gconst->deckCount[player2]) {
    #####:  187:		printf("FAILED: other player's deckCount altered\n");
    #####:  188:		*passed = 0;
        -:  189:	}
        -:  190:
        -:  191:	//discard count
      500:  192:	if (G->discardCount[player2] != Gconst->discardCount[player2]) {
    #####:  193:		printf("FAILED: other player's discardCount altered\n");
    #####:  194:		*passed = 0;
        -:  195:	}
        -:  196:
      500:  197:}
        -:  198:
        -:  199:
        -:  200:
    #####:  201:void addbugs(int player, struct gameState *G) {
        -:  202:
        -:  203:	//victoryCard check
    #####:  204:	G->supplyCount[1] = rand() % 10;
        -:  205:
        -:  206:	//handCount check
    #####:  207:	G->handCount[player] = G->handCount[player] - 1;
        -:  208:
        -:  209:	//deckCount check
    #####:  210:	G->deckCount[player] = G->deckCount[player] -5;
        -:  211:
    #####:  212:}
        -:  213:
        -:  214:
