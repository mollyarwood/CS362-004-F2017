        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************
        -:    2: * Name: Molly Arwood
        -:    3: * Date: 10-11-17
        -:    4: * Class: CS_362_SE2
        -:    5: * cardtest1.c - Adventurer Test
        -:    6:************************************************/
        -:    7:
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18://constants and prototypes
        -:   19:#define TESTCARD = "adventurer"
        -:   20:int structComparer(struct gameState *, struct gameState *, int);
        -:   21:
        -:   22:
        -:   23:
        -:   24:
        1:   25:int main() {
        -:   26:
        -:   27:	/*********************************************
        -:   28:	//Initial Setup
        -:   29:	*********************************************/
        -:   30:	struct gameState G;
        -:   31:	struct gameState Gconst;
        1:   32:	srand(time(NULL));
        1:   33:	int r = rand() % 100000000;
        1:   34:	int numPlayers = 2;
        1:   35:	int coin_bonus = 0;	
        1:   36:	int i = 0;
        1:   37:	int k[10] = {adventurer, gardens, council_room, village, minion, mine, 
        -:   38:		   		cutpurse, sea_hag, tribute, smithy};
        -:   39:
        -:   40:	//initialize game
        1:   41:	initializeGame(numPlayers, k, r, &G);
        1:   42:	memcpy(&Gconst, &G, sizeof(struct gameState));
        1:   43:	printf("\n\n-------------Testing Adventurer--------------\n\n");
        -:   44:
        -:   45:
        -:   46:
        -:   47:	/*********************************************
        -:   48:	//variables before adventurer played
        -:   49:	*********************************************/
        1:   50:	int currPlayer = whoseTurn(&G);
        1:   51:	int cardsInHand = G.handCount[currPlayer];
        1:   52:	int deckCount = G.deckCount[currPlayer];
        1:   53:	int initialTreasure = G.supplyCount[4] + G.supplyCount[5] + G.supplyCount[6];
        1:   54:	int victorySupply[3] = {G.supplyCount[1], G.supplyCount[2], G.supplyCount[3]};
        -:   55:	int kingdomSupply[20];
       21:   56:	for (i = 0; i < 20; i++) {
       20:   57:		kingdomSupply[i] = G.supplyCount[i+7];
        -:   58:	}
        -:   59:
        -:   60:
        -:   61:	//play adventurer card
        1:   62:	cardEffect(adventurer, -1, -1, -1, &G, 0, &coin_bonus);
        -:   63:
        -:   64:
        -:   65:	/********************************************
        -:   66:	//variables after adventurer played
        -:   67:	********************************************/
        -:   68:
        -:   69:	//hand count increase
        1:   70:	if (G.handCount[currPlayer] == cardsInHand + 2) {
    #####:   71:		printf("PASSED: current hand count increased by 2\n\n");
        -:   72:	} 
        -:   73:	else {
        1:   74:		printf("FAILED: current hand count increase\n\n");
        -:   75:	}
        -:   76:
        -:   77:	//current hand's money increase
        1:   78:	int newTreasure = G.supplyCount[4] + G.supplyCount[5] + G.supplyCount[6];
        1:   79:	if (initialTreasure > newTreasure) {
    #####:   80:		printf("PASSED: current hand treasure increased \n\n");
        -:   81:	}
        -:   82:	else {
        1:   83:		printf("FAILED: current hand treasure differs from expected\n\n");
        -:   84:	}
        -:   85:
        -:   86:
        -:   87:
        -:   88:	//deck count decrease
        1:   89:	if (G.deckCount[currPlayer] < deckCount) {
        1:   90:		printf("PASSED: deck count decrease\n\n");
        -:   91:	}
        -:   92:	else {
    #####:   93:		printf("FAILED: deck count decrease\n\n");
        -:   94:	}
        -:   95:
        -:   96:
        -:   97:	//checking victory card pile
        1:   98:	int flag = 1;
        4:   99:	for (i = 0; i < sizeof(victorySupply) / sizeof(int); i++) {
        3:  100:		if (victorySupply[i] != G.supplyCount[i+1]) {
    #####:  101:			flag = 0;
        -:  102:		}
        -:  103:	}
        1:  104:	if (flag) {
        1:  105:		printf("PASSED: victory cards unchanged\n\n");
        -:  106:	}
        -:  107:	else {
    #####:  108:		printf("FAILED: victory cards unchanged\n\n");
        -:  109:	}
        -:  110:
        -:  111:
        -:  112:	//checking kingdom card pile
        1:  113:	flag = 1;
       21:  114:	for (i = 0; i < sizeof(kingdomSupply) / sizeof(int); i++) {
       20:  115:		if (kingdomSupply[i] != G.supplyCount[i+7]) {
    #####:  116:			flag = 0;
        -:  117:		}
        -:  118:	}
        1:  119:	if (flag) {
        1:  120:		printf("PASSED: kingdom cards unchanged\n\n");
        -:  121:	}
        -:  122:	else {
    #####:  123:		printf("FAILED: kingdom cards unchanged\n\n");
        -:  124:	}
        -:  125:
        -:  126:	//checking other player's state
        1:  127:	currPlayer = whoseTurn(&G) + 1;
        -:  128:
        1:  129:	int flag2 = structComparer(&Gconst, &G, currPlayer);
        1:  130:	if (flag2 == 1) {
        1:  131:		printf("PASSED: other player's handCount unchanged\n\n");
        1:  132:		printf("PASSED: other player's deck unchanged\n\n");
        1:  133:		printf("PASSED: other player's discard count unchanged\n\n");
        -:  134:	}
        -:  135:
        -:  136:
        -:  137:
        1:  138:	printf("\n\n");
        -:  139:
        -:  140:
        1:  141:	return 0;
        -:  142:}
        -:  143:
        -:  144:
        -:  145:
        1:  146:int structComparer(struct gameState *state1, struct gameState *state2, int player2) {
        1:  147:	int i = 0;
        1:  148:	int flag = 1;
        -:  149:
        -:  150:
        -:  151:	//handCount comparison
        1:  152:	if (state1->handCount[player2] != state2->handCount[player2]) {
    #####:  153:		flag = 0;
    #####:  154:		printf("FAILED ohter player's handCount altered\n");
        -:  155:	}
        -:  156:	
        -:  157:	//deck comparision
        1:  158:	if (state1->deckCount[player2] != state2->deckCount[player2]) {
    #####:  159:		printf("state1: %d \t state2: %d \n", state1->deckCount[player2], state2->deckCount[player2]);
    #####:  160:		flag = 0;
    #####:  161:		printf("FAILED: other player's deckCount altered\n");
        -:  162:	}
        -:  163:
        -:  164:	//discard count
        1:  165:	if (state1->discardCount[player2] != state2->discardCount[player2]) {
    #####:  166:		flag = 0;
    #####:  167:		printf("FAILED: other player's discardCount altered\n");
        -:  168:	}
        -:  169:
        1:  170:	return flag;
        -:  171:}
